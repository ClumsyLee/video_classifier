classdef TestDualTVL1OpticalFlow
    %TestDualTVL1OpticalFlow
    properties (Constant)
        im = 255*uint8([...
            0 0 0 0 0 0 0 0 0 0;...
            0 0 0 0 0 0 0 0 0 0;...
            0 0 0 0 0 0 0 0 0 0;...
            0 0 0 1 1 1 0 0 0 0;...
            0 0 0 1 0 1 0 0 0 0;...
            0 0 0 1 1 1 0 0 0 0;...
            0 0 0 0 0 0 0 0 0 0;...
            0 0 0 0 0 0 0 0 0 0;...
            0 0 0 0 0 0 0 0 0 0;...
            0 0 0 0 0 0 0 0 0 0;...
        ]);
    end

    methods (Static)
        function test_1
            im1 = TestDualTVL1OpticalFlow.im;
            im2 = circshift(im1, [0 1]);
            alg = cv.DualTVL1OpticalFlow();
            flow = alg.calc(im1, im2);
        end

        function test_2
            prevImg = rgb2gray(imread(fullfile(mexopencv.root(),'test','RubberWhale1.png')));
            nextImg = rgb2gray(imread(fullfile(mexopencv.root(),'test','RubberWhale2.png')));
            alg = cv.DualTVL1OpticalFlow();
            alg.ScaleStep = 0.3;
            alg.MedianFiltering = 3;
            flow = alg.calc(prevImg, nextImg);
            validateattributes(flow, {'single'}, ...
                {'3d', 'size',[size(prevImg,1) size(prevImg,2) 2]});
        end
    end

end
